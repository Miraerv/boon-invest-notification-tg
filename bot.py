#!/usr/bin/env python
# pylint: disable=unused-argument
import logging
import threading
import redis
import json
import asyncio
import os
from dotenv import load_dotenv

from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")

REDIS_HOST = os.getenv("REDIS_HOST", 'localhost')
REDIS_PORT = int(os.getenv("REDIS_PORT", 6379))
REDIS_CHANNEL_REGISTRATION = 'user_registered'
REDIS_CHANNEL_APPLICATION = 'application'  # –ù–æ–≤—ã–π –∫–∞–Ω–∞–ª –¥–ª—è –∑–∞—è–≤–æ–∫

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logging.getLogger("httpx").setLevel(logging.WARNING)
logger = logging.getLogger(__name__)

ADMIN_CHAT_IDS_STR = os.getenv("ADMIN_CHAT_IDS")
ADMIN_CHAT_IDS = []
if ADMIN_CHAT_IDS_STR:
    try:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É '[id1, id2]' –≤ —Å–ø–∏—Å–æ–∫ [id1, id2]
        ADMIN_CHAT_IDS = json.loads(ADMIN_CHAT_IDS_STR)
        if not isinstance(ADMIN_CHAT_IDS, list):
             logger.warning("ADMIN_CHAT_IDS –≤ .env –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–ø–∏—Å–∫–æ–º. –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
             ADMIN_CHAT_IDS = []
    except json.JSONDecodeError:
        logging.error("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ ADMIN_CHAT_IDS. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ –≤–∞–ª–∏–¥–Ω—ã–π JSON-–º–∞—Å—Å–∏–≤, –Ω–∞–ø—Ä–∏–º–µ—Ä: [12345, 67890]")
        ADMIN_CHAT_IDS = []

def redis_listener(application: Application, loop: asyncio.AbstractEventLoop):
    try:
        r = redis.Redis(host=REDIS_HOST, port=REDIS_PORT, db=0, decode_responses=True)
        pubsub = r.pubsub()
        # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –æ–±–∞ –∫–∞–Ω–∞–ª–∞
        pubsub.subscribe(REDIS_CHANNEL_REGISTRATION, REDIS_CHANNEL_APPLICATION)
        logger.info(f"–ü–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª—ã Redis: {REDIS_CHANNEL_REGISTRATION}, {REDIS_CHANNEL_APPLICATION} –Ω–∞ {REDIS_HOST}:{REDIS_PORT}")
    except redis.exceptions.ConnectionError as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Redis: {e}")
        return # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø–æ—Ç–æ–∫, –µ—Å–ª–∏ –Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è

    for message in pubsub.listen():
        if message['type'] == 'message':
            try:
                channel = message['channel']
                logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ Redis –∫–∞–Ω–∞–ª–∞ {channel}: {message['data']}")
                data = json.loads(message['data'])

                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–∞–Ω–∞–ª–∞
                if channel == REDIS_CHANNEL_REGISTRATION:
                    text = create_registration_notification(data)
                elif channel == REDIS_CHANNEL_APPLICATION:
                    text = create_application_notification(data)
                else:
                    logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–∞–Ω–∞–ª: {channel}")
                    continue

                # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ –ø–æ—Ç–æ–∫–∞
                asyncio.run_coroutine_threadsafe(
                    send_notification(application, text), loop
                )

            except json.JSONDecodeError:
                logger.error("–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON –∏–∑ Redis")
            except Exception as e:
                logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ —Å–ª—É—à–∞—Ç–µ–ª–µ Redis: {e}")

def create_registration_notification(user_data: dict) -> str:
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    name = user_data.get('name', 'N/A')
    surname = user_data.get('surname', 'N/A')
    phone = user_data.get('phone', 'N/A')
    email = user_data.get('email', 'N/A')

    # –°–æ–∑–¥–∞–µ–º WhatsApp —Å—Å—ã–ª–∫—É
    clean_phone = ''.join(filter(str.isdigit, str(phone)))  # –£–±–∏—Ä–∞–µ–º –≤—Å–µ –Ω–µ—Ü–∏—Ñ—Ä–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã
    message = f"{name}, –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é"
    whatsapp_url = f"https://api.whatsapp.com/send?phone={clean_phone}&text={message}"

    return (
        f"üÜï –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!\n\n"
        f"üë§ –ò–º—è: {name}\n"
        f"üë§ –§–∞–º–∏–ª–∏—è: {surname}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
        f"üìß Email: {email}\n\n"
        f"üí¨ [–ù–∞–ø–∏—Å–∞—Ç—å –≤ WhatsApp]({whatsapp_url})"
    )

def create_application_notification(application_data: dict) -> str:
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ"""
    name = application_data.get('name', 'N/A')
    phone = application_data.get('phone', 'N/A')
    amount = application_data.get('amount', 'N/A')

    # –°–æ–∑–¥–∞–µ–º WhatsApp —Å—Å—ã–ª–∫—É
    clean_phone = ''.join(filter(str.isdigit, str(phone)))  # –£–±–∏—Ä–∞–µ–º –≤—Å–µ –Ω–µ—Ü–∏—Ñ—Ä–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã
    message = f"{name}, –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é!"
    whatsapp_url = f"https://api.whatsapp.com/send?phone={clean_phone}&text={message}"

    return (
        f"üìã –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!\n\n"
        f"üë§ –ò–º—è: {name}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
        f"üí∞ –°—É–º–º–∞: {amount} —Ä—É–±.\n"
        f"üí¨ [–ù–∞–ø–∏—Å–∞—Ç—å –≤ WhatsApp]({whatsapp_url})"
    )

async def send_notification(application: Application, text: str):
    if not ADMIN_CHAT_IDS:
        logger.warning("–°–ø–∏—Å–æ–∫ ADMIN_CHAT_IDS –ø—É—Å—Ç. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
        return

    tasks = [application.bot.send_message(
        chat_id=chat_id,
        text=text,
        parse_mode='Markdown',
        disable_web_page_preview=True
    ) for chat_id in ADMIN_CHAT_IDS]

    results = await asyncio.gather(*tasks, return_exceptions=True)

    for chat_id, result in zip(ADMIN_CHAT_IDS, results):
        if isinstance(result, Exception):
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç {chat_id}: {result}")
        else:
            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {chat_id}")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    await update.message.reply_html(
        f"–ü—Ä–∏–≤–µ—Ç, {user.mention_html()}!\n"
    )

def main() -> None:
    if not BOT_TOKEN:
        logger.critical("–û—à–∏–±–∫–∞: BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –≤ .env —Ñ–∞–π–ª.")
        return
    if not ADMIN_CHAT_IDS:
        logger.critical("–û—à–∏–±–∫–∞: ADMIN_CHAT_IDS –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—É—Å—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –≤ .env —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ [id1, id2].")
        return

    application = Application.builder().token(BOT_TOKEN).build()

    application.add_handler(CommandHandler("start", start))

    loop = asyncio.get_event_loop()

    redis_thread = threading.Thread(
        target=redis_listener, args=(application, loop), daemon=True
    )
    redis_thread.start()

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ...")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    main()
